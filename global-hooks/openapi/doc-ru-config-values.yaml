type: object
properties:
  storageClass:
    description: |
      Имя storage class, который будет использоваться для всех служебных компонентов (Prometheus, Grafana, OpenVPN, ...).
        * По умолчанию — null, при этом будет использоваться автоматически определяемый `cluster.defaultStorageClass`, но если такого нет — `emptyDir`;
        * Этот параметр имеет смысл использовать только в исключительных ситуациях.
  highAvailability:
    description: |
      Глобальный активатор режима отказоустойчивости для модулей, которые его поддерживают.
      
      По умолчанию не определён, и решение принимается на основе autodiscovery-параметра `global.discovery.clusterControlPlaneIsHighlyAvailable`.
  modules:
    description:
      Параметры для служебных компонентов.
    properties:
      ingressClass:
        description: |
          Класс Ingress-контроллера, который используется для служебных компонентов.
      publicDomainTemplate:
        # only check that is containing %s
        description: |
          Шаблон c ключом `%s` в качестве динамической части строки.
          
          Шаблон будет использоваться при формировании служебных DNS-записей, необходимых для внутренних нужд Deckhouse и работы модулей.
          
          **Нельзя** использовать в кластере (создавать Ingress-ресурсы) DNS-имена, подпадающие под указанный шаблон! Это может вызвать пересечения с создаваемыми Deckhouse Ingress-ресурсами.
          
          Если параметр не указан, то Ingress-ресурсы создаваться не будут.
      placement:
        description: |
          Настройки, определяющие расположение компонентов Deckhouse.
        properties:
          customTolerationKeys:
            description:
              Cписок ключей пользовательских toleration.
              
              Необходимо указывать, чтобы позволить планировщику размещать критически важные компоненты Deckhouse, такие как cni и csi, на выделенных узлах.
      https:
        description: |
          Способ реализации протокола HTTPS, используемый служебными компонентами.
        properties:
          mode:
            description: |
              Режим работы HTTPS:
              * `CertManager` — все служебные компоненты будут работать по HTTPS, самостоятельно заказывая сертификат с помощью ClusterIssuer, указанного в параметре `certManager.clusterIssuerName`;
              * `CustomCertificate` — все служебные компоненты будут работать по HTTPS, используя сертификат из пространства имен `d8-system`;
              * `Disabled` — в данном режиме все служебные компоненты будут работать только по HTTP (некоторые модули могут не работать, например [user-authn](https://deckhouse.io/ru/documentation/v1/modules/150-user-authn/));
              * `OnlyInURI` — все служебные компоненты будут работать по HTTP, подразумевая, что перед ними стоит внешний HTTPS-балансировщик, который терминирует HTTPS.
          certManager:
            properties:
              clusterIssuerName:
                description: |
                  ClusterIssuer, который используется для служебных компонентов.
                  
                  В данный момент доступны `letsencrypt`, `letsencrypt-staging`, `selfsigned`, но вы можете определить свои.
          customCertificate:
            properties:
              secretName:
                description: |
                  Указываем имя Secret'а в пространстве имен `d8-system`, который будет использоваться для системных компонентов.
                  
                  Указанный Secret должен быть в формате [kubernetes.io/tls](https://kubernetes.github.io/ingress-nginx/user-guide/tls/#tls-secrets).
      resourcesRequests:
        description: |
          Количество CPU и memory, выделяемые для работы служебных компонентов.
        properties:
          everyNode:
            description: |
              Системные компоненты, работающие на каждом узле кластера (обычно это DaemonSet'ы).
            properties:
              cpu:
                description: |
                  Сумма CPU, выделяемая для всех компонентов на каждом узле.
              memory:
                description: |
                  Суммарный объем памяти, выделяемый для всех компонентов на каждом узле.
          masterNode:
            description: |
              Системные компоненты (control plane и системные компоненты на master-узлах).
              
              **Внимание!** В случае managed-кластера Deckhouse не управляет control plane компонентами, поэтому все ресурсы отдаются системным компонентам.
            properties:
              cpu:
                description: |
                  Сумма CPU, выделяемая для системных компонентов на master-узлах сверх `everyNode`.
                    * Для кластера, управляемого Deckhouse, значение по умолчанию определяется автоматически: `.status.allocatable.cpu` минимального master-узла (но не более 4 ядер) минус `everyNode`.
                    * Для managed-кластера значение по умолчанию — 1 ядро минус `everyNode`.
              memory:
                description: |
                  Суммарный объем памяти, выделяемый для системных компонентов на master-узлах сверх `everyNode`.
                    * Для кластера, управляемого Deckhouse, значение по умолчанию определяется автоматически: `.status.allocatable.memory` минимального master-узла (но не более 8 Гб) минус `everyNode`.
                    * Для managed-кластера значение по умолчанию — 1 Гб минус `everyNode`.
