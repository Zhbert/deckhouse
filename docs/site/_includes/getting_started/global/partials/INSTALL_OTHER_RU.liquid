{% assign revision=include.revision %}

Для установки **Deckhouse Platform** используется Docker-образ, в который необходимо передать конфигурационные файлы и SSH-ключи доступа на **master-узлы**. Выполните на **[персональном компьютере](step2.html#процесс-установки)**:

{%- if revision == 'ee' %}
{% snippetcut selector="docker-login" %}
```text
 echo <LICENSE_TOKEN> | docker login -u license-token --password-stdin registry.deckhouse.io
docker run --pull=always -it -v "$PWD/config.yml:/config.yml" -v "$HOME/.ssh/:/tmp/.ssh/" \
{% if page.platform_type == "existing" %} -v "$PWD/kubeconfig:/kubeconfig" \
{% endif %}{% if page.platform_type == "cloud" %} -v "$PWD/resources.yml:/resources.yml" -v "$PWD/dhctl-tmp:/tmp/dhctl" {% endif %} registry.deckhouse.io/deckhouse/ee/install:stable bash
```
{% endsnippetcut %}
{% else %}
{% snippetcut %}
```shell
docker run --pull=always -it -v "$PWD/config.yml:/config.yml" -v "$HOME/.ssh/:/tmp/.ssh/" \
{% if page.platform_type == "existing" %} -v "$PWD/kubeconfig:/kubeconfig" \
{% endif %}{% if page.platform_type == "cloud" %} -v "$PWD/resources.yml:/resources.yml" -v "$PWD/dhctl-tmp:/tmp/dhctl" {% endif %} registry.deckhouse.io/deckhouse/ce/install:stable bash
```
{% endsnippetcut %}
{% endif %}

{%- if page.platform_type == "existing" %}
Примечания:
- В kubeconfig необходимо смонтировать kubeconfig с доступом к Kubernetes API.
{% endif %}

Внутри контейнера выполните команду:

{% snippetcut %}
```shell
{%- if page.platform_type == "existing" %}
dhctl bootstrap-phase install-deckhouse \
  --kubeconfig=/kubeconfig \
  --config=/config.yml
{%- elsif page.platform_type == "baremetal" %}
dhctl bootstrap \
  --ssh-user=<username> \
  --ssh-host=<master_ip> \
  --ssh-agent-private-keys=/tmp/.ssh/id_rsa \
  --config=/config.yml
{%- elsif page.platform_type == "cloud" %}
dhctl bootstrap \
  --ssh-user=<username> \
  --ssh-agent-private-keys=/tmp/.ssh/id_rsa \
  --config=/config.yml \
  --resources=/resources.yml
{%- endif %}
```
{% endsnippetcut %}

{%- if page.platform_type == "baremetal" or page.platform_type == "cloud" %}
{%- if page.platform_type == "baremetal" %}
Здесь, переменная `username` — это имя пользователя, от которого генерировался SSH-ключ для установки.
{%- else %}
Здесь, переменная `username` —
{%- if page.platform_code == "openstack" %} имя пользователя по умолчанию для выбранного образа виртуальной машины.
{%- elsif page.platform_code == "azure" %} `azureuser` (для предложенных в этой документации образов).
{%- elsif page.platform_code == "gcp" %} `user` (для предложенных в этой документации образов).
{%- else %} `ubuntu` (для предложенных в этой документации образов).
{%- endif %}
{%- endif %}

{%- if page.platform_type == "cloud" %}
Примечания:
<ul>
<li>
<div markdown="1">
Благодаря использованию параметра `-v "$PWD/dhctl-tmp:/tmp/dhctl"` состояние данных Terraform-инстяллятора будет сохранено во временной директории на хосте запуска, что позволит корректно продолжить установку в случае прерывания работы контейнера с инсталлятором.
</div>
</li>
<li><p>В случае возникновения проблем во время разворачивания кластера{% if page.platform_type="cloud" %} в одном из облачных провайдеров{% endif %}, для прерывания процесса установки и удаления созданных при инсталляции объектов воспользуйтесь следующей командой (файл конфигурации должен совпадать с тем, с которым производилось разворачивание кластера):</p>
<div markdown="0">
{% snippetcut %}
```shell
dhctl bootstrap-phase abort \
  --ssh-user=<username> \
  --ssh-agent-private-keys=/tmp/.ssh/id_rsa \
  --config=/config.yml
```
{% endsnippetcut %}
</div></li>
</ul>
{%- endif %}
{%- endif %}

По окончании установки произойдёт возврат к командной строке.

{% if page.platform_type == "existing" %}
{% offtopic title="Если вы включили модуль ingress-nginx в config.yml" %}
Настройте Ingress-контроллер, для чего:
<ul><li><p>Создайте на <strong>master-узле</strong> файл <code>ingress-nginx-controller.yml</code> следующего содержания:</p>
{% snippetcut name="ingress-nginx-controller.yml" selector="ingress-nginx-controller-yml" %}
{% include_file "_includes/getting_started/{{ page.platform_code }}/partials/ingress-nginx-controller.yml.inc" syntax="yaml" %}
{% endsnippetcut %}</li>
<li><p>Примените его, выполнив на <strong>master-узле</strong> следующую команду:</p>
{% snippetcut %}
```shell
kubectl create -f ingress-nginx-controller.yml
```
{% endsnippetcut %}
</li>
</ul>
{% endofftopic %}
{% endif %}

Почти все готово для полноценной работы Deckhouse Platform!
